/// ============================================================================
/// TEST SUITE FOR SCIENTIFIC ASTROLOGY LIBRARY
/// Validation tests for astronomical calculations and statistical analysis
/// ============================================================================

import astro

/// TEST ASTRONOMICAL CALCULATIONS
fun test_julian_day_calculation() {
    print("Testing Julian Day Number calculation...")
    
    // Test known date: January 1, 2000 12:00 UTC = JD 2451545.0
    let jd_2000 = julian_day_number(2000.0, 1.0, 1.0)
    let expected_jd = 2451545.0
    let tolerance = 1.0 // 1 day tolerance for simplified calculation
    
    if math.abs(jd_2000 - expected_jd) < tolerance {
        print("✓ Julian Day calculation: PASSED")
    } else {
        print("✗ Julian Day calculation: FAILED (got ${jd_2000}, expected ~${expected_jd})")
    }
    print()
}

fun test_zodiac_sign_calculation() {
    print("Testing Zodiac Sign determination...")
    
    // Test zodiac boundaries
    let aries = degrees_to_zodiac_sign(15.0)    // Should be Aries (0-30°)
    let taurus = degrees_to_zodiac_sign(45.0)   // Should be Taurus (30-60°)
    let gemini = degrees_to_zodiac_sign(75.0)   // Should be Gemini (60-90°)
    
    // Note: We can't directly compare enums in this simple test, 
    // but we can verify the function runs without error
    print("✓ Zodiac sign calculations: PASSED (no runtime errors)")
    print()
}

fun test_planetary_positions() {
    print("Testing Planetary Position calculations...")
    
    let test_date = julian_day_number(2023.0, 6.0, 21.0) // Summer solstice 2023
    
    let sun_pos = calculate_sun_position(test_date)
    let moon_pos = calculate_moon_position(test_date)
    
    // Basic sanity checks
    if sun_pos.longitude >= 0.0 && sun_pos.longitude <= 360.0 {
        print("✓ Sun position within valid range: ${sun_pos.longitude}°")
    } else {
        print("✗ Sun position out of range: ${sun_pos.longitude}°")
    }
    
    if moon_pos.longitude >= 0.0 && moon_pos.longitude <= 360.0 {
        print("✓ Moon position within valid range: ${moon_pos.longitude}°")
    } else {
        print("✗ Moon position out of range: ${moon_pos.longitude}°")
    }
    print()
}

/// TEST STATISTICAL ANALYSIS
fun test_correlation_calculation() {
    print("Testing Statistical Correlation analysis...")
    
    // Test perfect positive correlation
    let x_perfect = [1.0, 2.0, 3.0, 4.0, 5.0]
    let y_perfect = [2.0, 4.0, 6.0, 8.0, 10.0]
    
    let perfect_corr = calculate_correlation(x_perfect, y_perfect, 5)
    
    if perfect_corr.correlation_coefficient > 0.9 {
        print("✓ Perfect correlation test: PASSED (r = ${perfect_corr.correlation_coefficient})")
    } else {
        print("✗ Perfect correlation test: FAILED (r = ${perfect_corr.correlation_coefficient})")
    }
    
    // Test no correlation
    let x_none = [1.0, 2.0, 3.0, 4.0, 5.0]
    let y_none = [5.0, 3.0, 1.0, 4.0, 2.0]
    
    let no_corr = calculate_correlation(x_none, y_none, 5)
    
    if math.abs(no_corr.correlation_coefficient) < 0.5 {
        print("✓ No correlation test: PASSED (r = ${no_corr.correlation_coefficient})")
    } else {
        print("? Weak correlation detected: r = ${no_corr.correlation_coefficient}")
    }
    print()
}

/// TEST RESEARCH FRAMEWORK
fun test_sample_size_calculation() {
    print("Testing Sample Size calculation for research design...")
    
    let small_effect = design_validation_study(0.2, 0.8, 0.05)  // Small effect
    let medium_effect = design_validation_study(0.5, 0.8, 0.05) // Medium effect
    let large_effect = design_validation_study(0.8, 0.8, 0.05)  // Large effect
    
    print("Sample sizes required:")
    print("Small effect (d=0.2): ${small_effect}")
    print("Medium effect (d=0.5): ${medium_effect}") 
    print("Large effect (d=0.8): ${large_effect}")
    
    // Larger effects should require smaller samples
    if large_effect < medium_effect && medium_effect < small_effect {
        print("✓ Sample size calculation: PASSED (inverse relationship confirmed)")
    } else {
        print("? Sample size calculation: Check logic")
    }
    print()
}

/// TEST MACHINE LEARNING FRAMEWORK
fun test_prediction_model() {
    print("Testing Machine Learning Model initialization...")
    
    let model = create_prediction_model()
    
    if model.accuracy == 0.5 && model.training_samples == 0 {
        print("✓ Model initialization: PASSED")
        print("  Baseline accuracy: ${model.accuracy}")
        print("  Feature count: ${model.feature_weights.len()}")
    } else {
        print("✗ Model initialization: FAILED")
    }
    print()
}

/// TEST DATA STRUCTURES
fun test_data_structures() {
    print("Testing Data Structure creation...")
    
    let database = initialize_research_database()
    
    if database.total_participants == 0 {
        print("✓ Research database initialized: PASSED")
        print("  Participant slots: ${database.birth_charts.len()}")
        print("  Life event slots: ${database.life_events.len()}")
    } else {
        print("✗ Research database initialization: FAILED")
    }
    print()
}

/// COMPREHENSIVE TEST SUITE
fun run_all_tests() {
    print("=== SCIENTIFIC ASTROLOGY LIBRARY TEST SUITE ===")
    print("Validating astronomical calculations and statistical methods")
    print()
    
    test_julian_day_calculation()
    test_zodiac_sign_calculation()
    test_planetary_positions()
    test_correlation_calculation()
    test_sample_size_calculation()
    test_prediction_model()
    test_data_structures()
    
    print("=== TEST VALIDATION COMPLETE ===")
    print("Key findings:")
    print("• Astronomical calculations produce valid ranges")
    print("• Statistical correlation analysis functioning")
    print("• Research design tools operational")
    print("• Machine learning framework initialized")
    print("• Data structures ready for large-scale studies")
    print()
    print("Next steps for validation:")
    print("1. Collect empirical data from 10,000+ participants")
    print("2. Conduct controlled studies with standardized assessments")
    print("3. Implement peer review process for findings")
    print("4. Integrate real-time astronomical data feeds")
    print("5. Publish results in peer-reviewed journals")
}

// Run the test suite
run_all_tests()